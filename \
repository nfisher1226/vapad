/* search_dialog.vala
 *
 * Copyright 2022 Nathan Fisher
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Vapad {
    [GtkTemplate (ui = "/org/hitchhiker_linux/vapad/search_dialog.ui")]
    public class SearchDialog : Gtk.Dialog {
        [Gtkchild]
        private unowned Gtk.SearchEntry search_entry;
        [Gtkchild]
        private unowned Gtk.Entry replace_entry;
        [GtkChild]
        private unowned Gtk.CheckButton use_regex;
        [GtkChild]
        private unowned Gtk.CheckButton case_sensitive;
        [GtkChild]
        private unowned Gtk.CheckButton whole_words;
        [GtkChild]
        private unowned Gtk.CheckButton wrap;
        [GtkChild]
        private unowned Gtk.CheckButton backwards;
        [GtkChild]
        private unowned Gtk.Button find_button;

        public SearchDialog (Gtk.Window window) {
            Object (use_header_bar: 1, transient_for: window);
        }

        construct {
            this.response.connect ( () => this.close ());
            this.find_button.clicked.connect (find);
        }

        private GtkSource.SearchSettings get_search_settings () {
            var settings = new GtkSource.SearchSettings ();
            settings.set_regex_enabled (this.use_regex.get_active ());
            settings.set_case_sensitive (this.case_sensitive.get_active ());
            settings.set_at_word_boundaries (this.whole_words.get_active ());
            settings.set_wrap_around (this.wrap.get_active ());
            settings.set_search_text (this.search_entry.get_text ());
            return settings;
        }

        private GtkSource.SearchContext get_search_context (Vapad.Tab tab) {
            var settings = this.get_search_settings ();
            var buffer = (GtkSource.Buffer)tab.sourceview.get_buffer ();
            var search_context = new GtkSource.SearchContext (buffer,  settings);
            search_context.set_highlight (true);
            return search_context;
        }

        private void find () {
            print ("Getting window\n");
            var win = (Vapad.Window)this.get_transient_for ();
            print ("Getting tab\n");
            var tab = (Vapad.Tab)win.current_tab ();
            print ("Getting sourceview\n");
            var view = (GtkSource.View)tab.sourceview;
            print ("Getting buffer\n");
            var buffer = (GtkSource.Buffer)view.get_buffer ();
            print ("Getting search context\n");
            var search_context = this.get_search_context (tab);
            var position = GLib.Value (GLib.Type.INT);
            buffer.get_property ("cursor_position", ref position);
            Gtk.TextIter current;
            Gtk.TextIter start;
            Gtk.TextIter end;
            buffer.get_iter_at_offset (out current, (int)position);
            Gtk.TextIter sel_start;
            Gtk.TextIter sel_end;
            bool has_wrapped;
            if (this.backwards.get_active ()) {
                if (buffer.get_selection_bounds (out sel_start, out sel_end)) {
                    current = sel_start;
                }
                search_context.backward (current, out start, out end, out has_wrapped);
            } else {
                if (buffer.get_selection_bounds (out sel_start, out sel_end)) {
                    current = sel_end;
                }
                search_context.forward (current, out start, out end, out has_wrapped);
            }
            buffer.place_cursor (start);
            buffer.select_range (start, end);
            view.scroll_to_iter (start, 0.25, false, 0.1, 0.1);
        }

        private void replace () {
        }

        private void replace_find () {
        }
    }
}
